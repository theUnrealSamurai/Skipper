[{"text": "This episode of Real Engineering is brought\nto you by Brilliant, a problem solving website", "start": 0.06, "duration": 4.23}, {"text": "that teaches you to think like an engineer.", "start": 4.29, "duration": 2.259}, {"text": "Introduction: Opening, scene in a pub listening\nto a song and opening the shazam app.", "start": 6.549, "duration": 5.941}, {"text": "Maybe be tricky to film.", "start": 12.49, "duration": 1.98}, {"text": "What you just witnessed was the Shazam app\nrecognising a song in a noisy environment,", "start": 14.47, "duration": 4.479}, {"text": "and proceeding to find a match for it among\nthe millions of songs in its servers database.", "start": 18.949, "duration": 4.91}, {"text": "For most this probably seems like a trivial\ntask.", "start": 23.859, "duration": 2.66}, {"text": "Our brains can identify songs incredibly quickly\nfrom a young age, but the pathways in your", "start": 26.519, "duration": 4.6}, {"text": "brain that allow you to identify a song quickly\nare incredibly complex.", "start": 31.119, "duration": 5.091}, {"text": "Often times you simply need to hear just a\nfew chords to know exactly what song is about", "start": 36.21, "duration": 4.06}, {"text": "to play, that jolt of excitement when you\ncan hear a DJ fading in the baseline of your", "start": 40.27, "duration": 4.85}, {"text": "favourite song.", "start": 45.12, "duration": 1.24}, {"text": "A simple combination of tones in a specific\norder allow you to identify a song from the", "start": 46.36, "duration": 4.87}, {"text": "thousands of other songs you have heard in\nyour life in an instant, but coding a computer", "start": 51.23, "duration": 5.03}, {"text": "do the same thing is an incredible challenge.", "start": 56.26, "duration": 2.65}, {"text": "A computer does not have an intuitive understanding\nof music.", "start": 58.91, "duration": 3.45}, {"text": "A computer can only compare songs to other\nsongs in its database, looking for a match", "start": 62.36, "duration": 4.619}, {"text": "by comparison.", "start": 66.979, "duration": 1.381}, {"text": "It is a problem akin to finding a needle in\na haystack, where you can only find the needle", "start": 68.36, "duration": 4.41}, {"text": "by looking at a picture of a needle and comparing\nit to each individual straw, comparing it\u2019s", "start": 72.77, "duration": 5.16}, {"text": "length and colour until you finally find the\nneedle.", "start": 77.93, "duration": 2.939}, {"text": "To create a software capable of doing this\ntask quickly poses a very interesting coding", "start": 80.869, "duration": 4.161}, {"text": "challenge and the solution the engineers at\nShazam came up with gives us some interesting", "start": 85.03, "duration": 4.75}, {"text": "insight into how our own brains work.", "start": 89.78, "duration": 1.75}, {"text": "A study by the Manchester Museum of Science\nand Industry tested 12,000 people\u2019s ability", "start": 91.53, "duration": 5.41}, {"text": "to recognise a song.", "start": 96.94, "duration": 2.1}, {"text": "They created an interactive game to search\nfor the most recognisable songs, where they", "start": 99.04, "duration": 3.819}, {"text": "would play the hook of 1000 best selling songs\nand recorded the time required to identify", "start": 102.859, "duration": 4.78}, {"text": "them.[1]", "start": 107.639, "duration": 1.0}, {"text": "Can you identify this song with just 2.3 seconds\nof the hook?", "start": 108.639, "duration": 5.311}, {"text": "That was the Spice Girls song Wannabe, which\nranks highest with a recognition time averaging", "start": 113.95, "duration": 4.239}, {"text": "just 2.3 seconds, and that\u2019s including the\nreaction time required to hit the button.", "start": 118.189, "duration": 4.801}, {"text": "Our brains are hardwired for this kind of\npattern recognition.", "start": 122.99, "duration": 3.39}, {"text": "In a world where recognising the sound of\nan approaching threat meant life or death,", "start": 126.38, "duration": 3.689}, {"text": "we have evolved incredibly efficient ways\nof categorizing and accessing historical data", "start": 130.069, "duration": 4.431}, {"text": "like this.", "start": 134.5, "duration": 1.21}, {"text": "Our brain does not take the sound and compare\nit to every sound we have ever heard like", "start": 135.71, "duration": 3.63}, {"text": "a computer, the specific combination of chords\nin progression simply activates specific neurons", "start": 139.34, "duration": 5.819}, {"text": "that unlock that historical data.", "start": 145.159, "duration": 2.381}, {"text": "What if the chords were played by a different\ninstrument?", "start": 147.54, "duration": 2.669}, {"text": "Would we recognise the song as quickly?", "start": 150.209, "duration": 2.301}, {"text": "Those same 2.3 seconds played on a guitar\nsounds like this.", "start": 152.51, "duration": 6.449}, {"text": "The notes are exactly the same, but they don\u2019t\nsound the exactly the same.", "start": 158.959, "duration": 3.45}, {"text": "We even know intuitively what instrument is\nplaying.", "start": 162.409, "duration": 3.03}, {"text": "Why is that?", "start": 165.439, "duration": 1.261}, {"text": "This is called the timbre of a note and different\ninstruments have different timbres.", "start": 166.7, "duration": 4.32}, {"text": "Pianos and guitars are examples of harmonic\ninstruments and when they produce a note,", "start": 171.02, "duration": 3.82}, {"text": "they aren\u2019t just producing a pure note of\na single frequency.", "start": 174.84, "duration": 3.64}, {"text": "Each note is a combination of multiple frequencies\nall related to the base note, the fundamental", "start": 178.48, "duration": 5.55}, {"text": "frequency.", "start": 184.03, "duration": 1.0}, {"text": "These are called overtones, and they are simply\nmultiples of the base frequency.", "start": 185.03, "duration": 4.06}, {"text": "Each instrument has a unique combination and\nevolution of these overtones that give it", "start": 189.09, "duration": 4.209}, {"text": "that unique sound.", "start": 193.299, "duration": 1.511}, {"text": "Again, it\u2019s quite easy for our brains to\ndistinguish between a piano and a guitar,", "start": 194.81, "duration": 5.17}, {"text": "but we need a way to quantify these characteristics\nfor a computer to recognise, and this is where", "start": 199.98, "duration": 4.869}, {"text": "the spectrogram comes in.", "start": 204.849, "duration": 1.801}, {"text": "A spectrogram is a visual representation of\nsound.", "start": 206.65, "duration": 2.979}, {"text": "It\u2019s a 3D graph with time on the x-axis,\nfrequency on the y-axis, and the amplitude", "start": 209.629, "duration": 5.411}, {"text": "of the frequency, or in other words the loudness,\non the z-axis, which is often represented", "start": 215.04, "duration": 4.979}, {"text": "by a colour.", "start": 220.019, "duration": 1.53}, {"text": "This 3D graph is something a computer can\nabsolutely recognise and store as data, but", "start": 221.549, "duration": 4.761}, {"text": "there is huge amount of data within a spectrogram\nlike this, and the more data there is the", "start": 226.31, "duration": 4.739}, {"text": "more computation time is required to find\na match.", "start": 231.049, "duration": 2.66}, {"text": "So the first step in reducing computation\ntime is reducing the data required to classify", "start": 233.709, "duration": 4.991}, {"text": "a song.", "start": 238.7, "duration": 1.47}, {"text": "Shazam uses something they call a fingerprint,\nwhere they transform these spectrograms into", "start": 240.17, "duration": 3.819}, {"text": "something that looks like star map.", "start": 243.989, "duration": 1.72}, {"text": "[2] Here each star represents the strongest\nfrequencies at particular times.", "start": 245.709, "duration": 5.04}, {"text": "Doing this, we have not only reduced our graph\nfrom 3 dimensions down to 2, but have drastically", "start": 250.749, "duration": 4.901}, {"text": "reduced the amount of data points on the graph.", "start": 255.65, "duration": 3.17}, {"text": "This is the first vital part of Shazam\u2019s\ntechnology.", "start": 258.82, "duration": 3.18}, {"text": "Every single song in Shazams database is stored\nin a fingerprint like this.", "start": 262.0, "duration": 4.36}, {"text": "When you open your phone and hit that Shazam\nbutton, the app accesses your microphone and", "start": 266.36, "duration": 4.49}, {"text": "begins to create its own fingerprint of the\nsound waves it receives.", "start": 270.85, "duration": 4.46}, {"text": "This ingenious method also helps the shazam\napp to filter out noise because it only creates", "start": 275.31, "duration": 4.67}, {"text": "data points for stand-out frequencies.", "start": 279.98, "duration": 2.68}, {"text": "Once the app has created a fingerprint of\nyour audio, it then sends it to the shazam", "start": 282.66, "duration": 4.431}, {"text": "servers where the recognition part of the\nprocess begins.", "start": 287.091, "duration": 3.659}, {"text": "This is where things get difficult.", "start": 290.75, "duration": 1.509}, {"text": "Let\u2019s look at a simplified song fingerprint,\nand a recorded fingerprint to see why.", "start": 292.259, "duration": 4.72}, {"text": "The recorded fingerprint is only a short recording\nof the song, in our example we have just 3", "start": 296.979, "duration": 5.751}, {"text": "possible frequencies, and each recorded fingerprint\nwill have just 3 time points.", "start": 302.73, "duration": 4.68}, {"text": "If we want to check the first 3 time points\nin the song for a match we first check the", "start": 307.41, "duration": 4.569}, {"text": "3 frequencies, then we move onto the next\ntime point and check the 3 possible frequencies", "start": 311.979, "duration": 5.211}, {"text": "again, and do the same for the final time\npoint.", "start": 317.19, "duration": 2.979}, {"text": "If we find a match, that is 9 operations required\nto find a match, but obviously that isn\u2019t", "start": 320.169, "duration": 5.331}, {"text": "likely.", "start": 325.5, "duration": 1.0}, {"text": "We then need to do those nine operations for\nevery time point in the song, or perhaps every", "start": 326.5, "duration": 4.76}, {"text": "time point in Shazams massive music archive,\nthis obviously is going to take a lot of computation", "start": 331.26, "duration": 4.879}, {"text": "time.", "start": 336.139, "duration": 1.141}, {"text": "This is not how Shazam looks for a match.", "start": 337.28, "duration": 2.83}, {"text": "First Shazam categorises fingerprints in a\nclever way.", "start": 340.11, "duration": 2.959}, {"text": "We don\u2019t search to see if a note exists\nin a song, we search to see if several notes", "start": 343.069, "duration": 4.891}, {"text": "exist separated by a particular time, just\nas brain does.", "start": 347.96, "duration": 4.31}, {"text": "This becomes our searchable address for a\nhash table.", "start": 352.27, "duration": 3.269}, {"text": "Hashes and hash functions are an incredibly\nuseful technique that appear everywhere in", "start": 355.539, "duration": 4.181}, {"text": "computer science.", "start": 359.72, "duration": 1.58}, {"text": "Hash functions can be found in search algorithms\nused by Google, to make sure files are downloaded", "start": 361.3, "duration": 5.06}, {"text": "correctly, and are the backbone of crypto\ncurrencies like bitcoin.", "start": 366.36, "duration": 2.95}, {"text": "[3]", "start": 369.31, "duration": 1.0}, {"text": "A hash function takes a varying length of\ninput and produces a fixed length output,", "start": 370.31, "duration": 4.24}, {"text": "called a hash.", "start": 374.55, "duration": 1.149}, {"text": "In practice, the input can be anything from\na short piece of text, like a password, to", "start": 375.699, "duration": 4.322}, {"text": "a long data stream like an entire movie.", "start": 380.021, "duration": 2.858}, {"text": "Consider a library of books.", "start": 382.879, "duration": 1.981}, {"text": "We want to store each book on a shelf so we\ncan find it later, and we know we\u2019ll have", "start": 384.86, "duration": 4.36}, {"text": "the title of the book when we\u2019re searching\nfor it.", "start": 389.22, "duration": 2.59}, {"text": "We can use a hash function to decide which\nshelf to put a book on, using the title of", "start": 391.81, "duration": 4.44}, {"text": "the book as the input and producing a shelf\nnumber as an output.", "start": 396.25, "duration": 4.52}, {"text": "The first goal of a hash function is to produce\noutputs that are uniformly distributed...In", "start": 400.77, "duration": 5.04}, {"text": "our library, we want the books to be spread\nevenly across the shelves, so no shelf in", "start": 405.81, "duration": 4.759}, {"text": "particular will end up full of books, leaving\nothers almost empty.", "start": 410.569, "duration": 4.131}, {"text": "The second goal of a hash function is that\nit should reduce collisions.", "start": 414.7, "duration": 3.98}, {"text": "A collision is when two different inputs produce\nthe same output hash.", "start": 418.68, "duration": 4.34}, {"text": "In our case, a collision results in two or\nmore books on the same shelf.", "start": 423.02, "duration": 4.53}, {"text": "If our library only has two shelves, collisions\nwill be really common, no matter what hash", "start": 427.55, "duration": 4.96}, {"text": "function you use.", "start": 432.51, "duration": 1.129}, {"text": "If our library had a billion shelves, a good\nhash function will mean collisions will be", "start": 433.639, "duration": 3.951}, {"text": "rare.", "start": 437.59, "duration": 1.0}, {"text": "Another goal of a hash function is that it\nshould be quick to calculate.", "start": 438.59, "duration": 3.35}, {"text": "If our library has millions of books, we don\u2019t\nwant to take too long figuring out which shelf", "start": 441.94, "duration": 4.11}, {"text": "each one needs to be on.", "start": 446.05, "duration": 1.88}, {"text": "A simple hash function might be to take the\ntitle of a book, and group them on shelves", "start": 447.93, "duration": 4.419}, {"text": "alphabetically.", "start": 452.349, "duration": 1.301}, {"text": "This would be really quick to calculate, but\nit would result in a lot of collisions, with", "start": 453.65, "duration": 4.239}, {"text": "many books on the same shelf, and wouldn\u2019t\nbe very well distributed.", "start": 457.889, "duration": 4.171}, {"text": "Think about how many book titles begin with\nthe word \u201cTHE\u201d, compared to how many book", "start": 462.06, "duration": 3.699}, {"text": "titles start with the letter \u201cZ\u201d.", "start": 465.759, "duration": 1.44}, {"text": "An alternative might be to take the position\nof each letter in the alphabet and sum up", "start": 467.199, "duration": 4.451}, {"text": "the letters in the book title.", "start": 471.65, "duration": 2.15}, {"text": "We could then divide that number by the number\nof shelves we have and take the remainder", "start": 473.8, "duration": 4.299}, {"text": "as the shelf number to store the book on.", "start": 478.099, "duration": 2.751}, {"text": "This would still be fairly fast to calculate,\nand would prevent all the books with titles", "start": 480.85, "duration": 4.62}, {"text": "starting with the word \u201cTHE\u201d being stored\non the same shelf.", "start": 485.47, "duration": 3.15}, {"text": "Now imagine, instead of book titles, our hash\nfunction takes data from our two frequencies", "start": 488.62, "duration": 4.699}, {"text": "separated by particular time as an input,\nt, and produces a number between 1 and...say", "start": 493.319, "duration": 5.691}, {"text": "1 billion.", "start": 499.01, "duration": 1.0}, {"text": "First, we go through our database of songs\nand calculate the hash number for each anchor", "start": 500.01, "duration": 3.939}, {"text": "point.", "start": 503.949, "duration": 1.47}, {"text": "Songs will contain multiple anchor points,\nwhich will allow us to categorise short snippets", "start": 505.419, "duration": 4.191}, {"text": "of songs by the frequency of the anchor point,\nthe frequency the following point and the", "start": 509.61, "duration": 4.53}, {"text": "time between them.", "start": 514.14, "duration": 1.589}, {"text": "And just like the library, we store each anchor\npoint in order by the hash.", "start": 515.729, "duration": 4.571}, {"text": "These addresses\u2019 are also categorised with\nsong IDs and time stamps within the song in", "start": 520.3, "duration": 4.44}, {"text": "a secondary hash table, allowing us to search\nfor matching songs.", "start": 524.74, "duration": 3.92}, {"text": "This makes it much faster to locate our matches,\nand to find our song we will require multiple", "start": 528.66, "duration": 4.84}, {"text": "matching anchor points.", "start": 533.5, "duration": 1.73}, {"text": "This ingenious method of song recognition\nallowed Shazam to be sold for 400 million", "start": 535.23, "duration": 5.18}, {"text": "dollars to Apple, and help you figure out\njust what that catchy song is.", "start": 540.41, "duration": 4.2}, {"text": "This is a very simplified view of how the\nprogramming of Shazam works, but I have linked", "start": 544.61, "duration": 4.56}, {"text": "my research materials below if you would like\nto read more into the process.", "start": 549.17, "duration": 4.05}, {"text": "Or if you would like to begin learning more\nabout programming and build a solid foundation", "start": 553.22, "duration": 3.79}, {"text": "of understanding, then you could take this\ncourse on Computer Science Fundamentals on", "start": 557.01, "duration": 3.91}, {"text": "Brilliant which will start with an intro to\nalgorithms and gradually build you up to more", "start": 560.92, "duration": 3.82}, {"text": "complex ideas like data types and structures,\nby the end of this course you will have discovered", "start": 564.74, "duration": 5.05}, {"text": "algorithms that can be used to extract answers\nfrom data, and when you are finished you can", "start": 569.79, "duration": 4.47}, {"text": "take the follow up course in computer science\nalgorithms.", "start": 574.26, "duration": 3.25}, {"text": "This is just one of many courses on Brilliant,\nwith more courses due to released soon on", "start": 577.51, "duration": 4.3}, {"text": "things like automotive engineering and Python\nCoding.", "start": 581.81, "duration": 2.48}, {"text": "If I have inspired you and you want to educate\nyourself, then go to brilliant.org/RealEngineering", "start": 584.29, "duration": 6.38}, {"text": "and sign up for free.And the first 73 people\nthat go to that link will get 20% off the", "start": 590.67, "duration": 4.69}, {"text": "annual Premium subscription.", "start": 595.36, "duration": 1.93}, {"text": "As always thanks for watching and thank you\nto all my Patreon supporters.", "start": 597.29, "duration": 2.89}, {"text": "If you would like to see more from me the\nlinks to my instagram, twitter, subreddit", "start": 600.18, "duration": 4.1}, {"text": "and discord server are below.", "start": 604.28, "duration": 15.13}]