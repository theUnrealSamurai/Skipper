[{"text": "Every modern computer, when you get\nright down to the bare metal,", "start": 0.12, "duration": 3.079}, {"text": "is doing basically the same sort of thing.", "start": 3.199, "duration": 2.811}, {"text": "I\u2019ve said before that computers are just\novergrown calculators,", "start": 6.01, "duration": 3.2}, {"text": "but how do you go from a simple calculator\nto playing video games,", "start": 9.21, "duration": 4.5}, {"text": "sending stuff over the internet,", "start": 13.71, "duration": 1.129}, {"text": "or even decompressing and displaying\nthe millions of pixels in this video?", "start": 14.839, "duration": 3.811}, {"text": "In short, what\u2019s your computer\nactually doing?", "start": 18.65, "duration": 4.37}, {"text": "Behind me is a scaled-up version of a computer,", "start": 25.46, "duration": 2.65}, {"text": "but we\u2019re going to go much, much simpler.", "start": 28.11, "duration": 2.31}, {"text": "If you take apart your phone or PC,", "start": 30.42, "duration": 2.619}, {"text": "somewhere in the heart of it will a\nCentral Processing Unit, or CPU,", "start": 33.039, "duration": 3.961}, {"text": "connected to all the other devices\nthat make it work.", "start": 37.0, "duration": 2.6}, {"text": "Now, to show a really basic example,\nwe\u2019re not going to use all those devices.", "start": 39.6, "duration": 3.7}, {"text": "The first one we are going to use\nis the clock.", "start": 43.3, "duration": 2.609}, {"text": "With every tick of the clock,", "start": 45.909, "duration": 1.0}, {"text": "our CPU goes through a step in what\u2019s called\nthe \u201cFetch-Execute\u201d cycle,", "start": 46.909, "duration": 4.161}, {"text": "or \u201cFetch-Decode-Execute\u201d.", "start": 51.07, "duration": 1.919}, {"text": "This clock is slightly magic,", "start": 52.989, "duration": 1.111}, {"text": "in that it ticks (click) every time (click)\nI click my fingers. (click)", "start": 54.1, "duration": 3.44}, {"text": "(click)", "start": 57.98, "duration": 0.68}, {"text": "In the CPU I\u2019m going to have three registers.", "start": 58.66, "duration": 2.44}, {"text": "These are bits of fast storage where the CPU\nholds values that it\u2019s working on right now.", "start": 61.1, "duration": 4.44}, {"text": "These are: a register that keeps track of\nour instruction cycle,", "start": 65.54, "duration": 2.71}, {"text": "another that loads our instructions from memory,", "start": 68.25, "duration": 1.93}, {"text": "and an Accumulator.", "start": 70.18, "duration": 2.07}, {"text": "The final thing we need in our simplified\ncomputer is somewhere to keep the instructions", "start": 72.25, "duration": 3.76}, {"text": "and any values that we end up calculating.", "start": 76.01, "duration": 2.13}, {"text": "That is RAM, Random Access Memory.", "start": 78.14, "duration": 2.48}, {"text": "We call it Random Access because it\ndoesn't matter when or in what order", "start": 80.62, "duration": 3.92}, {"text": "the information is read or written.", "start": 84.54, "duration": 2.67}, {"text": "So: that is our computer.", "start": 87.21, "duration": 2.16}, {"text": "Let\u2019s run a simple program.", "start": 89.37, "duration": 1.76}, {"text": "All it\u2019s going to do is count up.", "start": 91.13, "duration": 1.97}, {"text": "The processor has three steps:\nFetch, Decode, Execute.", "start": 93.1, "duration": 2.37}, {"text": "It will just repeat those on a loop,", "start": 95.47, "duration": 1.89}, {"text": "that\u2019s the one thing that\u2019s\nactually built into it.", "start": 97.36, "duration": 2.82}, {"text": "So we need some instructions,\nactually in memory,", "start": 100.18, "duration": 2.78}, {"text": "so let\u2019s load our program into RAM.", "start": 102.97, "duration": 2.12}, {"text": "The RAM is also used to store our answers, \nour outputs.", "start": 105.09, "duration": 3.3}, {"text": "In the real world,\nthese would all be stored in binary,", "start": 108.39, "duration": 2.56}, {"text": "but let\u2019s not overcomplicate things right now,\nlet's keep them human-readable.", "start": 110.95, "duration": 4.71}, {"text": "An instruction has two parts.", "start": 115.66, "duration": 1.72}, {"text": "The first part is the instruction itself.", "start": 117.38, "duration": 1.68}, {"text": "And the second part is usually\na memory address.", "start": 119.06, "duration": 2.5}, {"text": "On each clock tick, the CPU will do\none of three things:", "start": 121.56, "duration": 3.1}, {"text": "It will fetch an instruction from\na memory address.", "start": 124.66, "duration": 2.54}, {"text": "It will decode that instruction.", "start": 127.2, "duration": 1.58}, {"text": "And it will execute the instruction.", "start": 128.78, "duration": 1.6}, {"text": "Round and round in a loop.\nSo it\u2019s going to count up.", "start": 130.39, "duration": 2.51}, {"text": "We're going to begin with a number,", "start": 132.9, "duration": 1.33}, {"text": "and add one to it, over and over again.", "start": 134.23, "duration": 2.58}, {"text": "(click) Fetch.", "start": 136.81, "duration": 1.65}, {"text": "One clock tick.\nThe Program Counter is set to 0,", "start": 138.46, "duration": 2.55}, {"text": "so the CPU fetches the instruction at address\n0 in the memory", "start": 141.01, "duration": 3.29}, {"text": "and puts it into the instruction register.", "start": 144.3, "duration": 2.4}, {"text": "(click) Decode.", "start": 146.7, "duration": 1.84}, {"text": "The CPU decodes the instruction.", "start": 148.54, "duration": 1.979}, {"text": "The first part is the instruction,", "start": 150.519, "duration": 1.411}, {"text": "and the second part is a location.", "start": 151.93, "duration": 1.41}, {"text": "In our case, the instruction is LOAD\nand the address is 6.", "start": 153.34, "duration": 3.119}, {"text": "So we will be loading the value in\naddress 6 into the accumulator.", "start": 156.459, "duration": 4.2}, {"text": "(click) Execute.", "start": 160.659, "duration": 1.591}, {"text": "The CPU executes this instruction.", "start": 162.25, "duration": 2.56}, {"text": "It takes the value at address 6,", "start": 164.81, "duration": 1.489}, {"text": "and loads it into the accumulator.", "start": 166.299, "duration": 1.241}, {"text": "In this case the value is 1.", "start": 167.54, "duration": 2.08}, {"text": "(click) Fetch.", "start": 169.62, "duration": 1.929}, {"text": "The program counter is incremented,", "start": 171.549, "duration": 1.11}, {"text": "and the CPU fetches the next instruction\nin the next bit of the memory.", "start": 172.659, "duration": 3.491}, {"text": "(click) Decode.", "start": 176.15, "duration": 1.25}, {"text": "The CPU decodes the instruction.", "start": 177.4, "duration": 2.52}, {"text": "This time, it\u2019s ADD,\nand the address is 7.", "start": 179.92, "duration": 2.299}, {"text": "So we\u2019ll be adding what\u2019s at address 7\ninto what is already in the accumulator.", "start": 182.22, "duration": 4.36}, {"text": "(click) Execute.", "start": 186.58, "duration": 0.98}, {"text": "The CPU executes the instruction.\nWe add the value at address 7.", "start": 187.56, "duration": 4.02}, {"text": "In this case,\nit's the value 1.", "start": 191.58, "duration": 1.44}, {"text": "1 + 1 is 2.", "start": 193.02, "duration": 1.639}, {"text": "(click) Fetch.", "start": 194.659, "duration": 1.89}, {"text": "From the next memory location, number 2.", "start": 196.549, "duration": 2.181}, {"text": "(click) Decode.", "start": 198.73, "duration": 1.42}, {"text": "An instruction to STORE the value in the accumulator\ninto RAM, at address 6.", "start": 200.15, "duration": 4.78}, {"text": "(click) Execute.", "start": 204.93, "duration": 1.44}, {"text": "Now, notice that we are overwriting what\u2019s\nalready there,", "start": 206.37, "duration": 3.25}, {"text": "so address 6 now has 2 in it,\ninstead of 1.", "start": 209.62, "duration": 3.14}, {"text": "(click) Fetch.", "start": 212.76, "duration": 1.36}, {"text": "A new instruction: JUMP.", "start": 214.12, "duration": 1.959}, {"text": "With a jump,", "start": 216.079, "duration": 1.0}, {"text": "the next address we fetch from is the one\nin this instruction.", "start": 217.079, "duration": 3.211}, {"text": "(click) Decode.", "start": 220.29, "duration": 1.38}, {"text": "So we\u2019re going to jump to\naddress number 1.", "start": 221.67, "duration": 2.349}, {"text": "(click) Execute.", "start": 224.019, "duration": 1.72}, {"text": "The Program Counter is now back at 1.", "start": 225.739, "duration": 2.821}, {"text": "The ability to jump, to loop, and to build\ninstructions recursively is one of the foundations", "start": 228.56, "duration": 4.73}, {"text": "of computer science.\nSo: we're back up there.", "start": 233.29, "duration": 2.33}, {"text": "(click) Fetch from location 1.", "start": 235.62, "duration": 2.429}, {"text": "(click) Decode.", "start": 238.049, "duration": 1.241}, {"text": "It's the ADD instruction again.", "start": 239.29, "duration": 1.629}, {"text": "(click) Execute.", "start": 240.919, "duration": 1.311}, {"text": "Our accumulator still contains the values\nfrom before,", "start": 242.23, "duration": 2.67}, {"text": "so: 2 + 1 = 3.", "start": 244.9, "duration": 2.21}, {"text": "(click) Fetch.", "start": 247.11, "duration": 1.82}, {"text": "(click) Decode.", "start": 248.93, "duration": 1.82}, {"text": "STORE again.", "start": 250.75, "duration": 1.0}, {"text": "(click) Execute.", "start": 251.75, "duration": 1.7}, {"text": "Storing it into location number 6.", "start": 253.45, "duration": 1.659}, {"text": "(click) Fetch.", "start": 255.109, "duration": 1.181}, {"text": "(click) Decode.", "start": 256.29, "duration": 1.189}, {"text": "(click) Execute.", "start": 257.479, "duration": 1.181}, {"text": "And we jump again.", "start": 258.66, "duration": 1.27}, {"text": "(click) Fetch. (click) Decode. (click) Execute.\n(click) Fetch. (click) Decode. (click) Execute.", "start": 259.93, "duration": 6.0}, {"text": "(continues clicking) We're in a loop,\nand we\u2019re counting upwards", "start": 265.93, "duration": 2.49}, {"text": "by one on every sixth clock cycle.\n(stops clicking)", "start": 268.42, "duration": 3.249}, {"text": "Our program, with these simple instructions,\ndoesn\u2019t have a halt command,", "start": 271.669, "duration": 4.631}, {"text": "or any way to interrupt it,", "start": 276.3, "duration": 1.54}, {"text": "so it will just keep incrementing\nthat value by one (many fast clicks)", "start": 277.84, "duration": 4.22}, {"text": "until the number becomes so large it can\nno longer be held by the memory address.", "start": 282.06, "duration": 4.03}, {"text": "How it breaks then\u2026 well, that\u2019s a whole\nother video. (stops clicking)", "start": 286.09, "duration": 3.75}, {"text": "And my fingers are tired.", "start": 289.84, "duration": 1.81}, {"text": "This is a very fiddly way to program a computer.", "start": 291.65, "duration": 2.609}, {"text": "In theory, it can be \nbut at this level,", "start": 294.259, "duration": 2.22}, {"text": "these instructions are just encoded\nin raw binary data,", "start": 296.479, "duration": 2.541}, {"text": "which is basically unreadable for humans.", "start": 299.02, "duration": 2.2}, {"text": "So we can convert that base 2 binary\nto base 16, hexadecimal,", "start": 301.22, "duration": 2.89}, {"text": "at that level we call it machine code.", "start": 304.11, "duration": 2.48}, {"text": "The next step up from that is a symbolic language\ncalled Assembly, which is a bit more readable,", "start": 306.59, "duration": 4.71}, {"text": "but it\u2019s still close to working at that\nbare metal.", "start": 311.3, "duration": 2.83}, {"text": "The original \"Prince of Persia\" game was completely\nprogrammed in assembly.", "start": 314.13, "duration": 4.36}, {"text": "That is almost unbelievable to me:", "start": 318.49, "duration": 2.32}, {"text": "painstakingly figuring out each pixel of animation\nand encoding it into something that the computer", "start": 320.81, "duration": 5.169}, {"text": "almost understands directly.", "start": 325.98, "duration": 2.36}, {"text": "Programming like that is complex, and hard,", "start": 328.34, "duration": 2.22}, {"text": "and prone to the sort of human error that\nintroduces massive security problems.", "start": 330.56, "duration": 3.919}, {"text": "It is difficult to code and difficult to debug.", "start": 334.479, "duration": 3.41}, {"text": "So rather than dealing with the messiness,", "start": 337.889, "duration": 2.431}, {"text": "or, well, the pristine logic of machine code,", "start": 340.32, "duration": 2.9}, {"text": "higher-level languages were developed as an\nintermediary step.", "start": 343.22, "duration": 3.46}, {"text": "Those languages handle all of that memory\nreading and writing for us,", "start": 346.68, "duration": 3.21}, {"text": "so all we need to focus on is\nwhat we want the computer to do.", "start": 349.89, "duration": 4.17}, {"text": "So, here\u2019s my code:", "start": 354.06, "duration": 2.2}, {"text": "just the same instructions,\nphrased a little bit differently,", "start": 356.26, "duration": 3.96}, {"text": "phrased for humans to be able\nto read.", "start": 360.22, "duration": 1.659}, {"text": "I specify a variable, X. I then write a function\nthat loops forever,", "start": 361.879, "duration": 4.07}, {"text": "and each passing through that loop\nI increment X by 1.", "start": 365.949, "duration": 3.99}, {"text": "Once I've written that code, I then pass it\nto a compiler,", "start": 369.939, "duration": 2.6}, {"text": "which turns it into that\noriginal machine code for me.", "start": 372.539, "duration": 2.53}, {"text": "So when I run the program,", "start": 375.069, "duration": 1.19}, {"text": "it\u2019s loaded into the computer's memory,\nand executed.", "start": 376.259, "duration": 2.871}, {"text": "If I want to run it on a completely different\ntype of computer, a Mac instead of a PC,", "start": 379.13, "duration": 4.43}, {"text": "I can compile it for that CPU instead.", "start": 383.56, "duration": 3.08}, {"text": "But this still doesn\u2019t answer the question\nof how the computer is", "start": 386.64, "duration": 2.638}, {"text": "doing something as complex as\ndecompressing and displaying this video.", "start": 389.278, "duration": 4.692}, {"text": "The answer to that is:", "start": 393.97, "duration": 1.25}, {"text": "speed.", "start": 395.22, "duration": 1.0}, {"text": "At the speed I was clicking,\nat the end there,", "start": 396.22, "duration": 1.69}, {"text": "we were executing one instruction every couple\nof seconds on one thread, one bit of the system.", "start": 397.91, "duration": 4.68}, {"text": "A modern CPU executes billions of instructions\nper second \u2013 gigahertz \u2013 on multiple threads.", "start": 402.59, "duration": 5.53}, {"text": "But at the heart of your PC, or your phone,", "start": 408.12, "duration": 1.88}, {"text": "there is still just a ticking clock and \na fetch-execute cycle.", "start": 410.0, "duration": 5.64}, {"text": "I\u2019ve used a password manager for years,", "start": 415.64, "duration": 1.74}, {"text": "and if you\u2019re techie enough to reach the\nend of this video, you should too.", "start": 417.38, "duration": 3.54}, {"text": "And I\u2019m not just saying that because this video is\nsponsored by Dashlane, a password manager,", "start": 420.92, "duration": 4.68}, {"text": "and if you go to dashlane.com/tomscott, you can get\na free 30-day trial of their premium version.", "start": 425.6, "duration": 5.56}, {"text": "Why should you use Dashlane? Well, first,\nreusing passwords is a terrible idea.", "start": 431.16, "duration": 5.42}, {"text": "If you\u2019re like me a few years back,", "start": 436.58, "duration": 1.6}, {"text": "then you\u2019re reusing very similar passwords\nthat have a few letters changed,", "start": 438.18, "duration": 4.12}, {"text": "or have the site\u2019s name stuck somewhere in them.", "start": 442.3, "duration": 2.28}, {"text": "It\u2019s not great.", "start": 444.58, "duration": 1.78}, {"text": "One data breach at one of those sites, and it\u2019d be time to start worrying.", "start": 446.36, "duration": 3.98}, {"text": "These days, Dashlane sits in my browser,\nand when I want to log in somewhere,", "start": 450.34, "duration": 3.42}, {"text": "I unlock Dashlane with the single\npassword that I have to remember,", "start": 453.76, "duration": 2.54}, {"text": "and it autofills it for me.", "start": 456.3, "duration": 2.44}, {"text": "Dashlane also stores and autofills credit cards and\naddress information across your devices,", "start": 458.74, "duration": 4.74}, {"text": "and it\u2019s got a VPN to encrypt your traffic on public wifi networks if you want to.", "start": 463.48, "duration": 4.22}, {"text": "If you are the kind of person who can remember", "start": 467.7, "duration": 2.12}, {"text": "20-character unique symbol-filled passwords\nfor dozens of different sites, congratulations.", "start": 469.82, "duration": 6.8}, {"text": "But if you\u2019re not superhuman,\nthen your choice is basically:", "start": 476.62, "duration": 3.44}, {"text": "use insecure passwords or\nuse a password manager.", "start": 480.06, "duration": 3.74}, {"text": "Now, you could use post-it notes on your\nmonitor as a password manager\u2026", "start": 483.8, "duration": 3.32}, {"text": "or you could use Dashlane,", "start": 487.12, "duration": 1.6}, {"text": "which generates, stores, and autofills\nlong, secure, different passwords for every site.", "start": 488.72, "duration": 5.1}, {"text": "I don\u2019t have to try and type in a 20-character password", "start": 493.82, "duration": 2.78}, {"text": "filled with symbols on my phone any more.", "start": 496.6, "duration": 2.34}, {"text": "I pull up Dashlane instead.", "start": 498.94, "duration": 1.3}, {"text": "Everything just works, synchronised on all my devices,", "start": 500.24, "duration": 3.24}, {"text": "across Windows, Mac, iPhone, Android,\nall automatically.", "start": 503.48, "duration": 3.4}, {"text": "It plugs into Chrome, Firefox, Edge,\nSafari, Opera, even Internet Explorer.", "start": 506.88, "duration": 4.22}, {"text": "And despite the fact that it\u2019s all\nsynchronised in the cloud,", "start": 511.1, "duration": 2.84}, {"text": "Dashlane themselves don\u2019t know what\nthose passwords are", "start": 513.94, "duration": 3.04}, {"text": "and based on their security architecture,\ncan never find them out.", "start": 516.98, "duration": 3.64}, {"text": "I\u2019ll explain that next time.", "start": 520.62, "duration": 1.98}, {"text": "So: dashlane.com/tomscott for a 30-day\nfree trial of Dashlane Premium,", "start": 522.6, "duration": 5.14}, {"text": "which includes unlimited password storage and sync.", "start": 527.74, "duration": 2.84}, {"text": "And if you like it, you can use the code\n\u201ctomscott\u201d for 10% off.", "start": 530.58, "duration": 2.98}]