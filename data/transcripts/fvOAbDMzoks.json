[{"text": "In a previous video", "start": 0.42, "duration": 1.69}, {"text": "I showed you how to utilize the I2C protocol, which in a nutshell is a popular communication protocol.", "start": 2.11, "duration": 7.49}, {"text": "That is commonly used to let one master device talk to a bigger number of slave devices in order to tell them what to do.", "start": 9.88, "duration": 7.7}, {"text": "Sounds like an awesome concept that every ic should have integrated, right?", "start": 18.519, "duration": 4.76}, {"text": "Well, I recently stumbled upon the DS3234 IC which is a real-time clock", "start": 24.34, "duration": 6.22}, {"text": "that automatically keeps track of the seconds, minutes, hours, days, date, month and year information", "start": 30.78, "duration": 9.22}, {"text": "and even offers tool as programmable alarms with square wave signal outputs", "start": 40.48, "duration": 2.959}, {"text": "Needless to say I want to use it in a project", "start": 44.469, "duration": 2.659}, {"text": "But what I'm missing are the SCL and SDA pins, which are necessary for the I2C communication protocol", "start": 47.5, "duration": 7.669}, {"text": "instead it offers a CLK, MISO", "start": 55.87, "duration": 3.5}, {"text": "MOSI and SS pin which not surprisingly since the datasheet spoiled the surprise are part of the SPI", "start": 59.829, "duration": 7.82}, {"text": "communication protocol", "start": 68.079, "duration": 2.0}, {"text": "so this video", "start": 70.09, "duration": 1.23}, {"text": "Let's find out how we can use SPI with the Arduino in order to write and read data from my precious RTC", "start": 71.32, "duration": 7.909}, {"text": "IC", "start": 79.229, "duration": 1.301}, {"text": "Let's get started", "start": 80.53, "duration": 2.0}, {"text": "This video is sponsored by JLC PCB", "start": 94.09, "duration": 3.319}, {"text": "their partner site is Easy EDA gets regular updates and now even features a 3d view of your design that", "start": 97.899, "duration": 7.37}, {"text": "Only requires one click to turn it into a PCB order whose prices start as low as $2", "start": 105.549, "duration": 6.98}, {"text": "First off how do we need to connect the Arduino to the IC?", "start": 114.659, "duration": 3.74}, {"text": "Well, according to the block diagram of the Arduino microcontroller", "start": 119.1, "duration": 4.069}, {"text": "It features the SPI functionality at the pins PB for 3 5 & 2", "start": 123.27, "duration": 6.53}, {"text": "Which after checking depend out of the microcontroller?", "start": 130.259, "duration": 2.66}, {"text": "correlates with the digital pins, 13 12 11 and 10", "start": 133.77, "duration": 4.429}, {"text": "But it is mentionable that we are not restricted to pin 10 as the Slave select pin", "start": 138.72, "duration": 5.3}, {"text": "In fact, we could use any pin of the microcontroller for that", "start": 144.02, "duration": 3.989}, {"text": "so according to my simplified wiring diagram I", "start": 148.98, "duration": 3.169}, {"text": "connected the Arduino to the ds3234 IC with simple hookup wires and", "start": 152.52, "duration": 5.929}, {"text": "Once that was done it was time for the programming", "start": 159.15, "duration": 2.839}, {"text": "Since the breakout board I'm using is from spot fun", "start": 162.989, "duration": 2.9}, {"text": "I quickly found a bit of code from them on github which", "start": 165.89, "duration": 3.569}, {"text": "We can go through line by line in order to understand how SPI works", "start": 169.86, "duration": 5.0}, {"text": "at first the SPI library of the Arduino is included and", "start": 175.5, "duration": 4.729}, {"text": "Then the CS or chip select pin is assigned", "start": 180.51, "duration": 3.47}, {"text": "This pin basically starts the SPI communication when it is pulled low", "start": 184.92, "duration": 4.19}, {"text": "And hence the communication when it is pulled high. And yes", "start": 189.11, "duration": 4.83}, {"text": "You would need one chip select line for every SPI", "start": 193.94, "duration": 3.239}, {"text": "IC you want to control with a master device, which is kind of the bottleneck of this communication protocol", "start": 197.18, "duration": 6.72}, {"text": "But anyway next we call the function RTC_init", "start": 204.69, "duration": 4.16}, {"text": "there we declared the CS pin as an outputs and", "start": 209.7, "duration": 3.41}, {"text": "Starts the SPI protocol by firstly setting its bit order to MSB first", "start": 213.39, "duration": 5.33}, {"text": "To understand that statements we have to look at the data sheet of the DS3234 IC", "start": 219.66, "duration": 5.899}, {"text": "Which tells us that we can either read or write from or two addresses with 8 bits of data", "start": 225.84, "duration": 6.32}, {"text": "those 8 bits represent either the seconds minutes and hours", "start": 233.28, "duration": 4.19}, {"text": "Or even the basic settings for the IC like whether an alarm should be set", "start": 237.78, "duration": 4.489}, {"text": "What is more important though is whether we should firstly send the most significant bits", "start": 243.15, "duration": 4.92}, {"text": "So it's seven first or the least significant bits", "start": 248.23, "duration": 3.5}, {"text": "So bit zero first and the data sheets clearly defines MSB first", "start": 251.89, "duration": 5.12}, {"text": "Which we just declared in the sketch", "start": 257.56, "duration": 2.33}, {"text": "Next the SPI data mode is set to SPI mode one", "start": 261.1, "duration": 4.01}, {"text": "Which we could blindly accept because the datasheet States it's on its first page", "start": 265.27, "duration": 4.969}, {"text": "But what does this SPI mode actually mean?", "start": 270.52, "duration": 2.899}, {"text": "Well, for that we have to look at the remaining SPI pins besides chip select", "start": 274.24, "duration": 5.48}, {"text": "CLK stands for clock which like the name implies is a square wave clock signal that the microcontroller", "start": 281.05, "duration": 6.11}, {"text": "Generates when it is sending or receiving data", "start": 287.47, "duration": 2.959}, {"text": "MOSI stands for master out slave in which gets utilized when the Arduino sends over data to the IC", "start": 291.55, "duration": 7.43}, {"text": "And MISO is the opposites and stands for master in slave out", "start": 299.86, "duration": 3.619}, {"text": "Which gets used when the slave I see here sends over data to the master Arduino", "start": 303.88, "duration": 4.91}, {"text": "You already noticed that the data I sent over", "start": 309.61, "duration": 3.109}, {"text": "consists of a square wave signal as well", "start": 313.54, "duration": 3.44}, {"text": "which basically represents a 1 bits if the voltage is higher and the 0 bits if the voltage is low", "start": 317.53, "duration": 5.269}, {"text": "But here comes the details and also the modes into play", "start": 323.41, "duration": 4.22}, {"text": "in Mode 0 and 1 you got a clock signal which is normally low and only high when the SPI communication occurs", "start": 328.09, "duration": 7.7}, {"text": "In mode 0 though the data on the MOSI and MISO lines gets read at the rising edge of the clock signal", "start": 336.61, "duration": 6.83}, {"text": "And in mode 1 the data gets read on the falling edge of the clock signal.", "start": 343.86, "duration": 5.91}, {"text": "in mode 2 and 3 the clock voltage potential is the opposite meaning it is normally higher and", "start": 350.2, "duration": 6.139}, {"text": "Only lower when the SPI communication takes place", "start": 356.62, "duration": 3.77}, {"text": "in mode 2 the data then get read on the falling edge and in mode 3 on the rising edge", "start": 361.33, "duration": 5.209}, {"text": "Memorizing all those modes can be a bit tricky", "start": 368.05, "duration": 2.42}, {"text": "But honestly not necessary because the datasheet will most of the time tell you the required modes", "start": 370.47, "duration": 6.54}, {"text": "So let's move on with sketch", "start": 377.71, "duration": 2.0}, {"text": "Next the chip select pin gets put low which means we are about to send or receive data", "start": 380.48, "duration": 5.989}, {"text": "Then the hexadecimal number 8E gets sent over from master to slave. But why?", "start": 387.44, "duration": 6.47}, {"text": "Well by once again having a look at the data sheets", "start": 394.79, "duration": 3.199}, {"text": "We can find a bit address map for the DS3234 registers", "start": 398.15, "duration": 4.67}, {"text": "Which I already talked about earlier with the read and write addresses and the contents of the registers", "start": 403.43, "duration": 6.59}, {"text": "So the data we just sent over was actually an address that we can write you", "start": 410.99, "duration": 4.7}, {"text": "the addresses register is the special purpose register where we can for example", "start": 416.48, "duration": 5.029}, {"text": "Enable the oscillator D square wave outputs or the alarm interrupts", "start": 421.91, "duration": 4.67}, {"text": "Now this sketch sends over the hexadecimal number 60 which converted into binary", "start": 427.37, "duration": 6.11}, {"text": "stands for B R 0 1 1 0 0 0 0 0", "start": 434.02, "duration": 4.76}, {"text": "That means we activate the square wave outputs and the temperature conversion", "start": 439.54, "duration": 4.7}, {"text": "But I want to check whether the SPI communication truly works", "start": 445.04, "duration": 3.86}, {"text": "So I added two more ones to the RS 2 and RS 1 bits in order to set the square wave outputs to", "start": 449.27, "duration": 7.789}, {"text": "8.192 KHz", "start": 457.07, "duration": 2.089}, {"text": "as you can see here. I did not convert this binary value into hexadecimal", "start": 459.98, "duration": 3.859}, {"text": "because it works either way", "start": 464.6, "duration": 2.0}, {"text": "and after ending the SPI communication by pulling the chip select pin high", "start": 467.33, "duration": 4.25}, {"text": "it was time to upload the codes and have a look at the square wave output pin on the oscilloscope", "start": 471.58, "duration": 6.389}, {"text": "Which does infects output the precise 8.192 KHz signal", "start": 478.7, "duration": 4.519}, {"text": "Which means our SPI communication was successful", "start": 483.71, "duration": 3.529}, {"text": "The next part of the codes was to set time date function, which looks complicated at first", "start": 487.94, "duration": 5.48}, {"text": "But is easy to grasp if you understand bit math", "start": 493.76, "duration": 3.2}, {"text": "what they do here is simply converting the entered values for day, month, year, hour, minute and", "start": 497.87, "duration": 6.98}, {"text": "seconds into binary value suitable for the registers", "start": 505.31, "duration": 3.77}, {"text": "then through a four loop the function writes to the addresses 80 81 82", "start": 510.07, "duration": 5.659}, {"text": "84 85 and 86 in order to set the current time and date", "start": 516.1, "duration": 5.089}, {"text": "The write function works the same way as I described it before.", "start": 522.28, "duration": 0.82}, {"text": "But what follows is more interesting with the read time/date function", "start": 526.6, "duration": 4.25}, {"text": "Here we got once again a whole lots of rather complicated bit math", "start": 531.58, "duration": 4.64}, {"text": "It is once again used to convert the contents of the registers", "start": 536.98, "duration": 4.25}, {"text": "but this time converting it into a format that we as humans can easily understand.", "start": 541.63, "duration": 5.869}, {"text": "What is interesting though is how we read data from the IC", "start": 548.2, "duration": 4.039}, {"text": "For that we firstly sent over the address we want to read from", "start": 553.0, "duration": 3.979}, {"text": "Then we have to save the now incoming SPI data in an integer while also sending out data.", "start": 557.86, "duration": 6.47}, {"text": "In this case, the data is 00 but it can be anything like 99.  That does not matter.", "start": 564.82, "duration": 7.34}, {"text": "As soon as we get the receive data in the integer, we can then work with it. Like they do it here with bit math.", "start": 572.68, "duration": 6.71}, {"text": "And just like that, you are now familiar with the basics of SPI and how we can use it with the Arduino", "start": 580.03, "duration": 7.039}, {"text": "Of course you cannot use it for as many slave devices as the I2C protocol", "start": 587.77, "duration": 5.029}, {"text": "Due to the limited number of chip select lines", "start": 593.26, "duration": 2.78}, {"text": "But on the other hand the SPI protocol in this case reach the transmission speeds of 4 MHz", "start": 596.92, "duration": 6.679}, {"text": "while most of my I2C projects only utilize 100 KHz", "start": 603.94, "duration": 4.4}, {"text": "So if you need fast speeds, like for example to write to an SD card, then SPI is the way to go.", "start": 609.4, "duration": 7.01}, {"text": "I hope you enjoyed this video and learned something new along the way.  As always don't forget to like, share, and subscribe", "start": 617.05, "duration": 7.52}, {"text": "Stay creative and I will see you next time", "start": 625.93, "duration": 3.35}]